const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for JWT
const JWT_SECRET = "mysecretkey";

// Hardcoded user data
const user = {
  id: 1,
  username: "testuser",
  password: "password123"
};

// Login Route (Generate JWT Token)
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  if (username === user.username && password === user.password) {
    const token = jwt.sign(
      { id: user.id, username: user.username },
      JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.status(200).json({ token }); // âœ… Only token in response
  } else {
    res.status(401).json({ message: "Invalid credentials" });
  }
});

// JWT Verification Middleware
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) {
    return res.status(403).json({ message: "Token missing!" });
  }

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: "Invalid or expired token" });
    }
    req.user = decoded;
    next();
  });
}

// Protected Route
app.get("/protected", verifyToken, (req, res) => {
  res.status(200).json({
    message: `Hello ${req.user.username}, you have access to this protected route!`,
  });
});

// Start Server
app.listen(3000, () => console.log("Server running on http://localhost:3000"));
